import numpy as np
from ase.neighborlist import primitive_neighbor_list
from typing import Any, Dict, List, Optional, Tuple

from element_mass import get_element_mass
from calculate_primary_moments import calculate_primary_moments
from check_proper_axes import (
    get_proper_axes_and_principal_axis,
    check_proper_axes,
    find_principal_axis,
)
from check_inversion_center import check_inversion_center
from check_reflection_plane import check_reflection_plane
from check_improper_axis import check_improper_axis, get_unique_axes_with_max_n


def symmetry_group(
    shifted_atoms: np.ndarray,
    molecule_type: str,
    degeneracy: int,
    proper_axes: List[Tuple[Any, int]],
    principal_axis: Optional[Tuple[Any, int]],
    unique_improper_axes: List[Tuple[Any, int]],
    sigma_h: bool,
    sigma_v: bool,
    has_inversion_center: bool,
):
    """
    결정된 여러 대칭 요소들을 바탕으로 분자 또는 결정의 점군(symmetry group)을 반환합니다.

    Parameters:
        shifted_atoms: 원자 좌표 (중심이 재배치된 상태)
        molecule_type: 분자의 종류 (예: "Linear molecule")
        degeneracy: 주 모멘트의 중복도 (예: 0, 1, 3)
        proper_axes: 올바른 회전축 목록 (회전축과 회전각의 순서쌍)
        principal_axis: 주 회전축 (없으면 None)
        unique_improper_axes: 고유한 반회전축 목록
        sigma_h: 수평 반사면 존재 여부
        sigma_v: 수직 반사면 존재 여부
        has_inversion_center: 역 중심 존재 여부

    Returns:
        점군을 나타내는 문자열 (예: "O_h", "D_2h", "C_i", 등)
    """

    if degeneracy == 3:

        if any(n == 4 for _, n in proper_axes):
            if has_inversion_center:
                return "O_h"
            else:
                return "O"
        else:
            if sigma_h:
                return "T_h"
            if sigma_v:
                return "T_d"
            else:
                return "T"

    elif degeneracy == 1:
        if molecule_type == "Linear molecule":
            if has_inversion_center:
                return "D_inf"
            else:
                return "C_inf"
        else:
            # n == 2인 축의 개수 계산
            n_count = sum(1 for _, n in proper_axes if n == 2)
            if principal_axis is not None and n_count >= principal_axis[1]:
                if sigma_h:
                    return f"D_{principal_axis[1]}h"
                if sigma_v:
                    return f"D_{principal_axis[1]}d"
                return f"D_{principal_axis[1]}"

            if sigma_h:
                return f"C_{principal_axis[1] if principal_axis else ''}h"
            if sigma_v:
                return f"C_{principal_axis[1] if principal_axis else ''}v"
            elif any(unique_improper_axes):
                return f"S_{2*unique_improper_axes[0][1]}"
            elif principal_axis is not None:
                return f"C_{principal_axis[1]}"

            return "Unknown"

    elif degeneracy == 0:
        n_count = sum(1 for _, n in proper_axes if n == 2)
        if n_count >= 1:
            if sigma_h:
                return "D_2h"
            else:
                return "D_2"

        elif principal_axis is not None and principal_axis[1] == 2:
            if sigma_h:
                return f"C_2h"
            if sigma_v:
                return f"C_2v"
            else:
                return "C_2"

        else:
            rank = np.linalg.matrix_rank(shifted_atoms)
            if has_inversion_center:
                return "C_i"
            elif rank < 3:
                return "C_s"
            else:
                return "C_1"

    return "Unknown"


def detect_local_symmetry(local_atoms: List[Dict[str, Any]]):
    """
    Parameters:
        local_atoms: 각 원자가 사전(dict) 형태로 {"element": str, "coordinates": list, "mass": float}로 표현됨.

    Returns:
        계산된 점군 (예: "D_2h", "C_1", 등)
    """

    (
        shifted_atoms,
        _,
        _,
        eigenvectors,
        molecule_type,
        degeneracy,
    ) = calculate_primary_moments(local_atoms)

    raw_proper_axes = check_proper_axes(shifted_atoms, eigenvectors)
    proper_axes = get_unique_axes_with_max_n(raw_proper_axes)

    principal_axis = find_principal_axis(proper_axes)
    proper_axes, principal_axis = get_proper_axes_and_principal_axis(
        proper_axes, principal_axis
    )

    improper_axes = check_improper_axis(eigenvectors, shifted_atoms)
    unique_improper_axes = get_unique_axes_with_max_n(improper_axes)

    sigma_h, sigma_v = check_reflection_plane(shifted_atoms, principal_axis)

    has_inversion_center = check_inversion_center(shifted_atoms)

    point_group = symmetry_group(
        shifted_atoms,
        molecule_type,
        degeneracy,
        proper_axes,
        principal_axis,
        unique_improper_axes,
        sigma_h,
        sigma_v,
        has_inversion_center,
    )

    return point_group


def find_crystal_local_symmetry(
    atoms: Dict[str, Any], cutoff: float, recenter: bool = True
):
    """
    주어진 결정(또는 분자) 구조에서 각 중심 원자와 이웃 원자 간의 국소 대칭을 계산합니다.

    Parameters:
        atoms: 결정 정보를 담은 사전으로, "lattice", "coordinates", "elements" 등을 포함함.
        cutoff: 이웃을 결정하는 cutoff 거리
        recenter: True이면 중심 원자를 원점으로 재배치하여 계산

    Returns:
        {(중심 원자 원소, 이웃 원자 원소): symmetry}
        만약 동일 (중심, 이웃) 쌍에 대해 서로 다른 symmetry가 감지되면 None을 반환.
    """

    lattice = atoms["lattice"]
    coords = np.array(atoms["coordinates"])
    elems = atoms["elements"]

    other, origin, dist = primitive_neighbor_list(
        "ijD", (True, True, True), lattice, coords, cutoff
    )

    ans = {}
    for org in range(len(coords)):
        org_elem = elems[org]

        for elem in elems:
            org_filter = np.logical_and(
                origin == org, [elems[idx] == elem for idx in other]
            )
            neighbor_indices = other[org_filter]
            rel_dist = dist[org_filter]

            """
            index 확인
            print(f"중심 원자 index: {org} ({org_elem})")
            print(f"  이웃 개수: {len(neighbor_indices)}")
            print("  이웃 indices:", neighbor_indices)
            """

            if len(neighbor_indices) == 0:
                symmetry = "C1"

            else:
                if recenter:
                    local_coords = [[0.0, 0.0, 0.0]]  # 중심 원자(0,0,0)배치
                    local_elems = [org_elem]
                    for idx, vec in zip(neighbor_indices, rel_dist):
                        local_coords.append(vec.tolist())
                        local_elems.append(elems[idx])

                else:  # 원래 좌표 유지
                    local_coords = [coords[org].tolist()]
                    local_elems = [org_elem]
                    for idx in neighbor_indices:
                        local_coords.append(coords[idx].tolist())
                        local_elems.append(elems[idx])

                # 각 원자에 대해 mass 정보 추가
                local_atoms = []
                for e, c in zip(local_elems, local_coords):
                    local_atoms.append(
                        {"element": e, "coordinates": c, "mass": get_element_mass(e)}
                    )
                symmetry = detect_local_symmetry(local_atoms)

                if (org_elem, elem) not in ans:
                    ans[(org_elem, elem)] = symmetry
                else:
                    if ans[org_elem, elem] != symmetry:
                        return None
    return ans


def build_structure(data):
    """
    주어진 데이터를 atoms형식으로 반환합니다.

    Parameters:
        data: "lattice", "elements", "coordinates","formula"

    Returns:
        질량정보가 포함된 atoms 딕셔너리리
    """
    atoms = {}
    atoms["lattice"] = data["lattice"]
    atoms["formula"] = data.get("formula")
    atoms["elements"] = list(data["elements"])
    atoms["coordinates"] = data["coordinates"]

    # mass: 각 원자에 대해 가져오기
    atoms["mass"] = [get_element_mass(elem) for elem in atoms["elements"]]

    return atoms


# 결과 출력
if __name__ == "__main__":

    # 아래 주석 처리된 코드는 분자 symmetry 검사용 예제입니다
    local_atoms =  [
    {"coordinates": [1.39, 0.0, 0.0], "mass": 12.0, "element": "C"},  # 탄소 1
    {"coordinates": [0.695, 1.204, 0.0], "mass": 12.0, "element": "C"},  # 탄소 2
    {"coordinates": [-0.695, 1.204, 0.0], "mass": 12.0, "element": "C"},  # 탄소 3
    {"coordinates": [-1.39, 0.0, 0.0], "mass": 12.0, "element": "C"},  # 탄소 4
    {"coordinates": [-0.695, -1.204, 0.0], "mass": 12.0, "element": "C"},  # 탄소 5
    {"coordinates": [0.695, -1.204, 0.0], "mass": 12.0, "element": "C"},  # 탄소 6
    {"coordinates": [2.48, 0.0, 0.0], "mass": 1.008, "element": "H"},  # 수소 1
    {"coordinates": [1.24, 2.148, 0.0], "mass": 1.008, "element": "H"},  # 수소 2
    {"coordinates": [-1.24, 2.148, 0.0], "mass": 1.008, "element": "H"},  # 수소 3
    {"coordinates": [-2.48, 0.0, 0.0], "mass": 1.008, "element": "H"},  # 수소 4
    {"coordinates": [-1.24, -2.148, 0.0], "mass": 1.008, "element": "H"},  # 수소 5
    {"coordinates": [1.24, -2.148, 0.0], "mass": 1.008, "element": "H"}   # 수소 6
    ]

    for atom in local_atoms:
        if "mass" not in atom:
            atom["mass"] = get_element_mass(atom["element"])
    print("symmetry:", detect_local_symmetry(local_atoms))
    
    """
    # 예시: 결정 데이터에 대해 local symmetry 검출
    from data_new import create_and_connect_db, read_crystal_id, get_crystal_info

    conn = create_and_connect_db("data.sqlite")
    ids = read_crystal_id(conn)
    
   
    data = get_crystal_info(conn, ids[19])   #한 데이터 내 cutoff당 symmetry
    for i in [1, 2, 3, 4]:
        cutoff = i
        atoms = build_structure(data)
        result = find_crystal_local_symmetry(atoms, cutoff, recenter=True)
        print("cutoff:", cutoff, "local symmetry:", result)
    
    # 여러 결정 데이터를 대상으로 symmetry 검출
    
    for mid in ids[80:100]:
        data = get_crystal_info(conn, mid)

        cutoff = 3
        atoms = build_structure(data)
        result = find_crystal_local_symmetry(atoms, cutoff, recenter=True)
        print(mid, "local symmetry:", result)
    """
